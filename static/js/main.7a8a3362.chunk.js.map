{"version":3,"sources":["FilterInput.js","Table.js","App.js","API.js","serviceWorker.js","index.js"],"names":["FilterInput","users","updateUsers","useState","inputValue","updateInput","useEffect","filteredUsers","filter","name","first","toLowerCase","indexOf","value","onChange","e","target","Table","sortedUsers","updateSortedUsers","className","scope","onClick","updateSort","sort","a","b","nameA","nameB","map","location","city","state","country","postcode","thumbnail","picture","cell","phone","gender","email","last","title","src","App","initialUsers","updateAvailableUsers","usersToRender","updateUsersToRender","axios","get","then","results","data","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"+NAsBeA,EApBK,SAAC,GAA4B,IAA1BC,EAAyB,EAAzBA,MAAOC,EAAkB,EAAlBA,YAAkB,EACZC,mBAAS,IADG,mBACvCC,EADuC,KAC3BC,EAD2B,KAe9C,OAZAC,qBAAU,WACR,IAAMC,EACW,KAAfH,EACIH,EACAA,EAAMO,QACJ,qBAAGC,KAAQC,MACHC,cAAcC,QAAQR,EAAWO,gBAAkB,KAGnET,EAAYK,KACX,CAACH,EAAYH,IAGd,uBAAOY,MAAOT,EAAYU,SAAU,SAAAC,GAAC,OAAIV,EAAYU,EAAEC,OAAOH,W,QCoEnDI,EAnFD,SAAC,GAAe,IAAbhB,EAAY,EAAZA,MAAY,EACcE,mBAAS,IADvB,mBACpBe,EADoB,KACPC,EADO,KAK3B,OAFAb,qBAAU,kBAAMa,EAAkBlB,KAAQ,CAACA,IAGzC,8BACE,wBAAOmB,UAAU,QAAjB,UACE,gCACE,+BACE,oBAAIC,MAAM,MAAV,mBACA,oBACEA,MAAM,MACNC,QAAS,WACP,IACMC,EADS,YAAOtB,GACOuB,MAAK,SAACC,EAAGC,GACpC,IAAMC,EAAQF,EAAEhB,KAAKC,MACfkB,EAAQF,EAAEjB,KAAKC,MAErB,OAAIiB,EAAQC,GACF,EAEND,EAAQC,EACH,EAGF,KAGTT,EAAkBI,IAlBtB,mBAuBA,oBAAIF,MAAM,MAAV,kBACA,oBAAIA,MAAM,MAAV,oBACA,oBAAIA,MAAM,MAAV,mBACA,oBAAIA,MAAM,MAAV,mBACA,oBAAIA,MAAM,MAAV,kBACA,oBAAIA,MAAM,MAAV,kBACA,oBAAIA,MAAM,MAAV,mBACA,oBAAIA,MAAM,MAAV,qBACA,oBAAIA,MAAM,MAAV,sBACA,oBAAIA,MAAM,MAAV,0BAGJ,gCACGH,EAAYW,KACX,oBACEC,SAAYC,EADd,EACcA,KAAMC,EADpB,EACoBA,MAAOC,EAD3B,EAC2BA,QAASC,EADpC,EACoCA,SACvBC,EAFb,EAEEC,QAAWD,UACXE,EAHF,EAGEA,KACAC,EAJF,EAIEA,MACAC,EALF,EAKEA,OACAC,EANF,EAMEA,MANF,IAOE/B,KAAQC,EAPV,EAOUA,MAAO+B,EAPjB,EAOiBA,KAAMC,EAPvB,EAOuBA,MAPvB,OASE,+BACE,6BAAKA,IACL,6BAAKhC,IACL,6BAAK+B,IACL,6BAAKF,IACL,6BAAKC,IACL,6BAAKF,IACL,6BAAKD,IACL,6BAAKN,IACL,6BAAKC,IACL,6BAAKC,IACL,6BAAKC,IACL,6BACE,qBAAKS,IAAKR,MAGZ,yBAhBOK,c,uBChCRI,MArBf,WAAgB,IAAD,EACgCzC,mBAAS,IADzC,mBACN0C,EADM,KACQC,EADR,OAEgC3C,mBAAS,IAFzC,mBAEN4C,EAFM,KAESC,EAFT,KAQb,OAJA1C,qBAAU,WCRH2C,IAAMC,IAAI,iDDSJC,MAAK,gBAAWC,EAAX,EAAGC,KAAQD,QAAX,OAA2BN,EAAqBM,QAC/D,IAGD,sBAAKhC,UAAU,MAAf,UACE,oDACA,0GAIA,cAAC,EAAD,CAAanB,MAAO4C,EAAc3C,YAAa8C,IAC/C,cAAC,EAAD,CAAO/C,MAAO8C,QEXAO,QACa,cAA7BC,OAAOzB,SAAS0B,UAEe,UAA7BD,OAAOzB,SAAS0B,UAEhBD,OAAOzB,SAAS0B,SAASC,MACvB,2DCZRC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SDyHlB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBd,MAAK,SAAAe,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.7a8a3362.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\n\r\nconst FilterInput = ({ users, updateUsers }) => {\r\n  const [inputValue, updateInput] = useState(\"\");\r\n\r\n  useEffect(() => {\r\n    const filteredUsers =\r\n      inputValue === \"\"\r\n        ? users\r\n        : users.filter(\r\n            ({ name: { first } }) =>\r\n              first.toLowerCase().indexOf(inputValue.toLowerCase()) >= 0\r\n          );\r\n\r\n    updateUsers(filteredUsers);\r\n  }, [inputValue, users]);\r\n\r\n  return (\r\n    <input value={inputValue} onChange={e => updateInput(e.target.value)} />\r\n  );\r\n};\r\n\r\nexport default FilterInput;","  \r\nimport React, { useState, useEffect } from \"react\";\r\n\r\nconst Table = ({ users }) => {\r\n  const [sortedUsers, updateSortedUsers] = useState([]);\r\n\r\n  useEffect(() => updateSortedUsers(users), [users]);\r\n\r\n  return (\r\n    <div>\r\n      <table className=\"table\">\r\n        <thead>\r\n          <tr>\r\n            <th scope=\"col\">title</th>\r\n            <th\r\n              scope=\"col\"\r\n              onClick={() => {\r\n                const usersCopy = [...users];\r\n                const updateSort = usersCopy.sort((a, b) => {\r\n                  const nameA = a.name.first;\r\n                  const nameB = b.name.first;\r\n\r\n                  if (nameA < nameB) {\r\n                    return -1;\r\n                  }\r\n                  if (nameA > nameB) {\r\n                    return 1;\r\n                  }\r\n\r\n                  return 0;\r\n                });\r\n\r\n                updateSortedUsers(updateSort);\r\n              }}\r\n            >\r\n              First\r\n            </th>\r\n            <th scope=\"col\">Last</th>\r\n            <th scope=\"col\">gender</th>\r\n            <th scope=\"col\">email</th>\r\n            <th scope=\"col\">phone</th>\r\n            <th scope=\"col\">cell</th>\r\n            <th scope=\"col\">city</th>\r\n            <th scope=\"col\">state</th>\r\n            <th scope=\"col\">country</th>\r\n            <th scope=\"col\">postcode</th>\r\n            <th scope=\"col\">picture</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {sortedUsers.map(\r\n            ({\r\n              location: { city, state, country, postcode },\r\n              picture: { thumbnail },\r\n              cell,\r\n              phone,\r\n              gender,\r\n              email,\r\n              name: { first, last, title }\r\n            }) => (\r\n              <tr key={email}>\r\n                <td>{title}</td>\r\n                <th>{first}</th>\r\n                <td>{last}</td>\r\n                <td>{gender}</td>\r\n                <td>{email}</td>\r\n                <td>{phone}</td>\r\n                <td>{cell}</td>\r\n                <td>{city}</td>\r\n                <td>{state}</td>\r\n                <td>{country}</td>\r\n                <td>{postcode}</td>\r\n                <td>\r\n                  <img src={thumbnail} />\r\n                </td>\r\n\r\n                <td></td>\r\n              </tr>\r\n            )\r\n          )}\r\n        </tbody>\r\n      </table>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Table;","  \r\nimport React, { useEffect, useState } from \"react\";\r\nimport FilterInput from \"./FilterInput\";\r\nimport Table from \"./Table\";\r\nimport { getUsers } from \"./API\";\r\nimport \"./App.css\";\r\n\r\nfunction App() {\r\n  const [initialUsers, updateAvailableUsers] = useState([]);\r\n  const [usersToRender, updateUsersToRender] = useState([]);\r\n\r\n  useEffect(() => {\r\n    getUsers().then(({ data: { results } }) => updateAvailableUsers(results));\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <h1>Employee Directory</h1>\r\n      <p>\r\n        To filter by first name, please begin your search in the user input\r\n        below\r\n      </p>\r\n      <FilterInput users={initialUsers} updateUsers={updateUsersToRender} />\r\n      <Table users={usersToRender} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;","import axios from \"axios\";\r\n\r\nexport const getUsers = function() {\r\n  return axios.get(\"https://randomuser.me/api/?results=200&nat=us\");\r\n};","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n    window.location.hostname === 'localhost' ||\r\n      // [::1] is the IPv6 localhost address.\r\n      window.location.hostname === '[::1]' ||\r\n      // 127.0.0.0/8 are considered localhost for IPv4.\r\n      window.location.hostname.match(\r\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n      )\r\n  );\r\n  \r\n  export function register(config) {\r\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n      // The URL constructor is available in all browsers that support SW.\r\n      const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n      if (publicUrl.origin !== window.location.origin) {\r\n        // Our service worker won't work if PUBLIC_URL is on a different origin\r\n        // from what our page is served on. This might happen if a CDN is used to\r\n        // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n        return;\r\n      }\r\n  \r\n      window.addEventListener('load', () => {\r\n        const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n  \r\n        if (isLocalhost) {\r\n          // This is running on localhost. Let's check if a service worker still exists or not.\r\n          checkValidServiceWorker(swUrl, config);\r\n  \r\n          // Add some additional logging to localhost, pointing developers to the\r\n          // service worker/PWA documentation.\r\n          navigator.serviceWorker.ready.then(() => {\r\n            console.log(\r\n              'This web app is being served cache-first by a service ' +\r\n                'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n            );\r\n          });\r\n        } else {\r\n          // Is not localhost. Just register service worker\r\n          registerValidSW(swUrl, config);\r\n        }\r\n      });\r\n    }\r\n  }\r\n  \r\n  function registerValidSW(swUrl, config) {\r\n    navigator.serviceWorker\r\n      .register(swUrl)\r\n      .then(registration => {\r\n        registration.onupdatefound = () => {\r\n          const installingWorker = registration.installing;\r\n          if (installingWorker == null) {\r\n            return;\r\n          }\r\n          installingWorker.onstatechange = () => {\r\n            if (installingWorker.state === 'installed') {\r\n              if (navigator.serviceWorker.controller) {\r\n                // At this point, the updated precached content has been fetched,\r\n                // but the previous service worker will still serve the older\r\n                // content until all client tabs are closed.\r\n                console.log(\r\n                  'New content is available and will be used when all ' +\r\n                    'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n                );\r\n  \r\n                // Execute callback\r\n                if (config && config.onUpdate) {\r\n                  config.onUpdate(registration);\r\n                }\r\n              } else {\r\n                // At this point, everything has been precached.\r\n                // It's the perfect time to display a\r\n                // \"Content is cached for offline use.\" message.\r\n                console.log('Content is cached for offline use.');\r\n  \r\n                // Execute callback\r\n                if (config && config.onSuccess) {\r\n                  config.onSuccess(registration);\r\n                }\r\n              }\r\n            }\r\n          };\r\n        };\r\n      })\r\n      .catch(error => {\r\n        console.error('Error during service worker registration:', error);\r\n      });\r\n  }\r\n  \r\n  function checkValidServiceWorker(swUrl, config) {\r\n    // Check if the service worker can be found. If it can't reload the page.\r\n    fetch(swUrl, {\r\n      headers: { 'Service-Worker': 'script' },\r\n    })\r\n      .then(response => {\r\n        // Ensure service worker exists, and that we really are getting a JS file.\r\n        const contentType = response.headers.get('content-type');\r\n        if (\r\n          response.status === 404 ||\r\n          (contentType != null && contentType.indexOf('javascript') === -1)\r\n        ) {\r\n          // No service worker found. Probably a different app. Reload the page.\r\n          navigator.serviceWorker.ready.then(registration => {\r\n            registration.unregister().then(() => {\r\n              window.location.reload();\r\n            });\r\n          });\r\n        } else {\r\n          // Service worker found. Proceed as normal.\r\n          registerValidSW(swUrl, config);\r\n        }\r\n      })\r\n      .catch(() => {\r\n        console.log(\r\n          'No internet connection found. App is running in offline mode.'\r\n        );\r\n      });\r\n  }\r\n  \r\n  export function unregister() {\r\n    if ('serviceWorker' in navigator) {\r\n      navigator.serviceWorker.ready\r\n        .then(registration => {\r\n          registration.unregister();\r\n        })\r\n        .catch(error => {\r\n          console.error(error.message);\r\n        });\r\n    }\r\n  }","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();"],"sourceRoot":""}